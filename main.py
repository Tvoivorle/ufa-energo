import streamlit as st
import pandas as pd
import numpy as np
import folium
from streamlit_folium import st_folium
import pydeck as pdk
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ç–µ–ø–ª–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", layout="wide")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å: –≤—ã–±–æ—Ä –≤–∫–ª–∞–¥–∫–∏
st.sidebar.header("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É")
tab_option = st.sidebar.selectbox(
    "–í–∫–ª–∞–¥–∫–∞",
    ["0Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (1 –ø—Ä–∏–º–µ—Ä)", "üõ¢Ô∏è –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –û–î–ü–£ (2 –ø—Ä–∏–º–µ—Ä)", "üîÖ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏ (3 –ø—Ä–∏–º–µ—Ä)",
     "üìà –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (4 –ø—Ä–∏–º–µ—Ä)", "üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è (map.py)"]
)

# –í–∫–ª–∞–¥–∫–∞ 1: map.py
if tab_option == "üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è (map.py)":
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏")

    # –§–∏–ª—å—Ç—Ä—ã
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ TXT —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=["csv", "txt"])
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file, encoding="cp1251", sep=",")
            st.success("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –∞–¥—Ä–µ—Å–µ
            df["–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"] = df["–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"].fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å")
            # –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
            df["–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"] = df["–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"].astype(str).str.strip().str.title()

            # –§–∏–ª—å—Ç—Ä—ã
            st.subheader("–§–∏–ª—å—Ç—Ä—ã")
            year = st.selectbox("–ì–æ–¥", sorted(df["–ì–æ–¥"].dropna().unique()))
            month = st.selectbox(
                "–ú–µ—Å—è—Ü", sorted(df[df["–ì–æ–¥"] == year]["–ú–µ—Å—è—Ü"].dropna().unique())
            )
            district = st.multiselect(
                "–†–∞–π–æ–Ω",
                df["–†–∞–π–æ–Ω"].dropna().unique(),
                default=list(df["–†–∞–π–æ–Ω"].dropna().unique()),
            )
            building_type = st.multiselect(
                "–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞",
                df["–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"].dropna().unique(),
                default=list(df["–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"].dropna().unique()),
            )

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            filtered_df = df[
                (df["–ì–æ–¥"] == year)
                & (df["–ú–µ—Å—è—Ü"] == month)
                & (df["–†–∞–π–æ–Ω"].isin(district))
                & (df["–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"].isin(building_type))
                ]

            # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            st.subheader(f"üìÇ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({len(filtered_df)} –∑–∞–ø–∏—Å–µ–π)")
            st.dataframe(filtered_df, use_container_width=True)

            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏")
            if "–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª" in filtered_df.columns:
                chart_data = (
                    filtered_df[["–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å", "–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª"]]
                    .dropna()
                    .sort_values("–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª", ascending=False)
                    .head(20)
                )
                if not chart_data.empty:
                    st.bar_chart(chart_data.set_index("–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"))
                else:
                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
            else:
                st.warning("–ö–æ–ª–æ–Ω–∫–∞ '–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö.")

            # –ê–Ω–æ–º–∞–ª–∏–∏
            st.subheader("üö® –ê–Ω–æ–º–∞–ª–∏–∏: –ù—É–ª–µ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ")
            zero_df = filtered_df[filtered_df["–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª"] == 0]
            if not zero_df.empty:
                st.error(f"üîª –ù–∞–π–¥–µ–Ω–æ {len(zero_df)} –æ–±—ä–µ–∫—Ç–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º:")
                st.dataframe(zero_df, use_container_width=True)
            else:
                st.success("‚úÖ –ù—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

            # –ö–∞—Ä—Ç–∞
            st.subheader("üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤")
            ICON_URLS = {
                "–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –î–æ–º": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png",
                "–î—Ä—É–≥–æ–µ –°—Ç—Ä–æ–µ–Ω–∏–µ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
                "–£—á–µ–±–Ω–æ–µ –ó–∞–≤–µ–¥–µ–Ω–∏–µ, –ö–æ–º–±–∏–Ω–∞—Ç, –¶–µ–Ω—Ç—Ä": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png",
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ó–¥–∞–Ω–∏—è, –ö–æ–Ω—Ç–æ—Ä—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png",
                "–î–µ—Ç.–Ø—Å–ª–∏ –ò –°–∞–¥—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-violet.png",
                "–®–∫–æ–ª—ã –ò –í—É–∑": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png",
                "–ñ–∏–ª–æ–µ –ó–¥–∞–Ω–∏–µ (–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞, –û–±—â–µ–∂–∏—Ç–∏–µ)": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightblue.png",
                "–ú–∞–≥–∞–∑–∏–Ω—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png",
                "–ë–æ–ª—å–Ω–∏—Ü—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png",
                "–ò–Ω—Ç–µ—Ä–Ω–∞—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightgreen.png",
                "–û–±—â–µ–∂–∏—Ç–∏–µ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightblue.png",
                "–ê–≤—Ç–æ—Å—Ç–æ—è–Ω–∫–∞": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
                "–ù–µ–∂–∏–ª–æ–π –î–æ–º": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
                "–ì–∞—Ä–∞–∂–∏": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
                "–ö–∞–∑–∞—Ä–º—ã –ò –ü–æ–º–µ—â–µ–Ω–∏—è –í–æ—Ö—Ä": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-darkgreen.png",
                "–ü–æ–∂–∞—Ä–Ω–æ–µ –î–µ–ø–æ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-darkred.png",
                "–°–ø–æ—Ä—Ç–∑–∞–ª—ã, –ö—Ä—ã—Ç—ã–µ –°—Ç–∞–¥–∏–æ–Ω—ã –ò –î—Ä—É–≥–∏–µ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –°–æ–æ—Ä—É–∂–µ–Ω–∏—è": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightgreen.png",
                "–ì—Ä—É–ø–ø–æ–≤–∞—è –°—Ç–∞–Ω—Ü–∏—è –°–º–µ—à–µ–Ω–∏—è": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
                "–ê–≤—Ç–æ–º–æ–π–∫–∞": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
                "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –û–±—ä–µ–∫—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-brown.png",
                "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –£—á—Ä–µ–∂–¥–µ–Ω–∏–µ": "https://raw.githubusercontent.com/ellen-firs/hackathon/refs/heads/main/media/medical_15048702.png",
                "–û–±—ä–µ–∫—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png"
            }

            if "–®–∏—Ä–æ—Ç–∞" in filtered_df.columns and "–î–æ–ª–≥–æ—Ç–∞" in filtered_df.columns:
                map_df = (
                    filtered_df[
                        [
                            "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å",
                            "–®–∏—Ä–æ—Ç–∞",
                            "–î–æ–ª–≥–æ—Ç–∞",
                            "–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞",
                            "–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª",
                        ]
                    ]
                    .dropna()
                    .copy()
                )
                map_df = map_df.rename(columns={"–®–∏—Ä–æ—Ç–∞": "lat", "–î–æ–ª–≥–æ—Ç–∞": "lon"})


                def get_icon_data(obj_type):
                    return {
                        "url": ICON_URLS.get(obj_type, ICON_URLS["–û–±—ä–µ–∫—Ç"]),
                        "width": 30,
                        "height": 30,
                        "anchorY": 30,
                    }


                map_df["icon_data"] = map_df["–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"].apply(get_icon_data)

                icon_layer = pdk.Layer(
                    type="IconLayer",
                    data=map_df,
                    get_icon="icon_data",
                    get_position="[lon, lat]",
                    get_size=4,
                    size_scale=10,
                    pickable=True,
                    tooltip=True,
                )

                view_state = pdk.ViewState(
                    latitude=map_df["lat"].mean(),
                    longitude=map_df["lon"].mean(),
                    zoom=11,
                    pitch=0,
                )

                tooltip = {
                    "html": """
                    <b>{–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å}</b><br>
                    –¢–∏–ø: {–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞}<br>
                    –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª} –ì–∫–∞–ª
                    """,
                    "style": {"backgroundColor": "white", "color": "black"},
                }

                r = pdk.Deck(layers=[icon_layer], initial_view_state=view_state, tooltip=tooltip)
                st.pydeck_chart(r)
            else:
                st.warning("–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–®–∏—Ä–æ—Ç–∞ / –î–æ–ª–≥–æ—Ç–∞).")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
    else:
        st.info("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ TXT —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")

# –í–∫–ª–∞–¥–∫–∞ 3: 1 –ø—Ä–∏–º–µ—Ä.py (–ø–æ—Ç–æ–º —Å–¥–µ–ª–∞—Ç—å –µ—ë –ø–µ—Ä–≤–æ–π)
elif tab_option == "0Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (1 –ø—Ä–∏–º–µ—Ä)":
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.write("""
    ### –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ TXT
    –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏.
    """)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª TXT", type=["txt"])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
    if uploaded_file is not None:
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            dataframe1 = pd.read_csv(uploaded_file, encoding='utf-8', sep=',')  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - –∑–∞–ø—è—Ç–∞—è
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            st.subheader("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            st.dataframe(dataframe1)

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –∑–∞–ø—è—Ç—ã–º–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ "‚Ññ –û–î–ü–£"
            if '‚Ññ –û–î–ü–£' in dataframe1.columns:
                count_with_comma = dataframe1['‚Ññ –û–î–ü–£'].astype(str).str.contains(',').sum()
                dataframe1 = dataframe1[~dataframe1['‚Ññ –û–î–ü–£'].astype(str).str.contains(',')]
                st.write(f"–£–¥–∞–ª–µ–Ω–æ {count_with_comma} —Å—Ç—Ä–æ–∫ —Å –∑–∞–ø—è—Ç—ã–º–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ '‚Ññ –û–î–ü–£'.")
            else:
                st.error("–°—Ç–æ–ª–±–µ—Ü '‚Ññ –û–î–ü–£' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.")

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ç–∏–ø–∞–º–∏ —Å—Ç—Ä–æ–µ–Ω–∏–π
            try:
                dataframe2 = pd.read_excel('sourse/–¢–∏–ø_—Å—Ç—Ä–æ–µ–Ω–∏—è.xlsx')
                dataframe2 = dataframe2.drop_duplicates(subset='–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞')

                # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—è "–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞" –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É
                dataframe1['–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞'] = dataframe1['–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞'].str.strip().str.lower()
                dataframe2['–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞'] = dataframe2['–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞'].str.strip().str.lower()

                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ "–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞"
                merged_df = pd.merge(dataframe1, dataframe2, on='–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞', how='left')

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ç–µ–≥–æ–≤
                merged_df['–ê–Ω–æ–º–∞–ª–∏—è_–Ω—É–ª–µ–≤–æ–µ_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ_–≤_–û–ü'] = False
                merged_df['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'] = merged_df['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'].fillna(0)

                # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–∏ –Ω—É–ª–µ–≤–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤ –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                merged_df['–ê–Ω–æ–º–∞–ª–∏—è_–Ω—É–ª–µ–≤–æ–µ_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ_–≤_–û–ü'] = (
                    (merged_df['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'] == 0) &
                    (merged_df['–ú–µ—Å—è—Ü'].isin([10, 11, 12, 1, 2, 3, 4]))
                )

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                st.subheader("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                st.dataframe(merged_df)

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–Ω–æ–º–∞–ª–∏—è–º
                anomaly_counts = merged_df['–ê–Ω–æ–º–∞–ª–∏—è_–Ω—É–ª–µ–≤–æ–µ_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ_–≤_–û–ü'].value_counts()
                st.write("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–Ω–æ–º–∞–ª–∏—è–º:")
                st.write(anomaly_counts)

                # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞
                st.subheader("üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤")

                # –§–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                show_anomalies_only = True  # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–æ–º–∞–ª–∏–∏

                # –§–∏–ª—å—Ç—Ä—ã: –¢–∏–ø —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è, –≥–æ–¥ –∏ –º–µ—Å—è—Ü
                unique_types = merged_df['–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞'].unique()
                selected_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è:", ["–í—Å–µ"] + list(unique_types))
                selected_year = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", ["–í—Å–µ"] + sorted(merged_df['–ì–æ–¥'].unique().tolist()))
                selected_month = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", ["–í—Å–µ"] + list(range(1, 13)))

                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                filtered_df = merged_df.copy()
                if show_anomalies_only:
                    filtered_df = filtered_df[filtered_df['–ê–Ω–æ–º–∞–ª–∏—è_–Ω—É–ª–µ–≤–æ–µ_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ_–≤_–û–ü']]
                if selected_type != "–í—Å–µ":
                    filtered_df = filtered_df[filtered_df['–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞'] == selected_type]
                if selected_year != "–í—Å–µ":
                    filtered_df = filtered_df[filtered_df['–ì–æ–¥'] == selected_year]
                if selected_month != "–í—Å–µ":
                    filtered_df = filtered_df[filtered_df['–ú–µ—Å—è—Ü'] == selected_month]

                # –°–ª–æ–≤–∞—Ä—å –∏–∫–æ–Ω–æ–∫
                ICON_URLS = {
                    "–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –¥–æ–º": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png",
                    "–î—Ä—É–≥–æ–µ –°—Ç—Ä–æ–µ–Ω–∏–µ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
                    "–£—á–µ–±–Ω–æ–µ –ó–∞–≤–µ–¥–µ–Ω–∏–µ, –ö–æ–º–±–∏–Ω–∞—Ç, –¶–µ–Ω—Ç—Ä": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png",
                    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ó–¥–∞–Ω–∏—è, –ö–æ–Ω—Ç–æ—Ä—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png",
                    "–î–µ—Ç.–Ø—Å–ª–∏ –ò –°–∞–¥—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-violet.png",
                    "–®–∫–æ–ª—ã –ò –í—É–∑": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png",
                    "–ñ–∏–ª–æ–µ –ó–¥–∞–Ω–∏–µ (–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞, –û–±—â–µ–∂–∏—Ç–∏–µ)": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightblue.png",
                    "–ú–∞–≥–∞–∑–∏–Ω—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png",
                    "–ë–æ–ª—å–Ω–∏—Ü—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png",
                    "–ò–Ω—Ç–µ—Ä–Ω–∞—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightgreen.png",
                    "–û–±—â–µ–∂–∏—Ç–∏–µ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightblue.png",
                    "–ê–≤—Ç–æ—Å—Ç–æ—è–Ω–∫–∞": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
                    "–ù–µ–∂–∏–ª–æ–π –î–æ–º": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
                    "–ì–∞—Ä–∞–∂–∏": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
                    "–ö–∞–∑–∞—Ä–º—ã –ò –ü–æ–º–µ—â–µ–Ω–∏—è –í–æ—Ö—Ä": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-darkgreen.png",
                    "–ü–æ–∂–∞—Ä–Ω–æ–µ –î–µ–ø–æ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-darkred.png",
                    "–°–ø–æ—Ä—Ç–∑–∞–ª—ã, –ö—Ä—ã—Ç—ã–µ –°—Ç–∞–¥–∏–æ–Ω—ã –ò –î—Ä—É–≥–∏–µ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –°–æ–æ—Ä—É–∂–µ–Ω–∏—è": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightgreen.png",
                    "–ì—Ä—É–ø–ø–æ–≤–∞—è –°—Ç–∞–Ω—Ü–∏—è –°–º–µ—à–µ–Ω–∏—è": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
                    "–ê–≤—Ç–æ–º–æ–π–∫–∞": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
                    "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –û–±—ä–µ–∫—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-brown.png",
                    "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –£—á—Ä–µ–∂–¥–µ–Ω–∏–µ": "https://raw.githubusercontent.com/ellen-firs/hackathon/refs/heads/main/media/medical_15048702.png",
                    "–û–±—ä–µ–∫—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png"
                }

                if "–®–∏—Ä–æ—Ç–∞" in filtered_df.columns and "–î–æ–ª–≥–æ—Ç–∞" in filtered_df.columns:
                    map_df = filtered_df[["–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å", "–®–∏—Ä–æ—Ç–∞", "–î–æ–ª–≥–æ—Ç–∞", "–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞",
                                          "–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª"]].dropna().copy()
                    map_df = map_df.rename(columns={"–®–∏—Ä–æ—Ç–∞": "lat", "–î–æ–ª–≥–æ—Ç–∞": "lon"})

                    def get_icon_data(obj_type):
                        return {
                            "url": ICON_URLS.get(obj_type, ICON_URLS["–û–±—ä–µ–∫—Ç"]),
                            "width": 30,
                            "height": 30,
                            "anchorY": 30,
                        }

                    map_df["icon_data"] = map_df["–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"].apply(get_icon_data)

                    icon_layer = pdk.Layer(
                        type="IconLayer",
                        data=map_df,
                        get_icon="icon_data",
                        get_position='[lon, lat]',
                        get_size=4,
                        size_scale=10,
                        pickable=True,
                        tooltip=True,
                    )

                    view_state = pdk.ViewState(
                        latitude=map_df["lat"].mean(),
                        longitude=map_df["lon"].mean(),
                        zoom=11,
                        pitch=0
                    )

                    tooltip = {
                        "html": """
                        <b>{–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å}</b><br>
                        –¢–∏–ø: {–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞}<br>
                        –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª} –ì–∫–∞–ª
                        """,
                        "style": {"backgroundColor": "white", "color": "black"}
                    }

                    r = pdk.Deck(layers=[icon_layer], initial_view_state=view_state, tooltip=tooltip)
                    st.pydeck_chart(r)
                else:
                    st.warning("–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–®–∏—Ä–æ—Ç–∞ / –î–æ–ª–≥–æ—Ç–∞).")

                # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                st.subheader("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                file_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .csv):",
                                          value="–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ.csv")
                if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                    csv_data = merged_df.to_csv(index=False, encoding='cp1251')
                    csv_bytes = csv_data.encode('cp1251')
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å CSV",
                        data=csv_bytes,
                        file_name=file_name,
                        mime="text/csv"
                    )
                    st.success(f"–§–∞–π–ª '{file_name}' –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")

            except FileNotFoundError:
                st.error("–§–∞–π–ª '–¢–∏–ø_—Å—Ç—Ä–æ–µ–Ω–∏—è.xlsx' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'sourse'.")

        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    else:
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

elif tab_option == "üõ¢Ô∏è –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –û–î–ü–£ (2 –ø—Ä–∏–º–µ—Ä)":

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    def process_data(df):
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è
        df = df[~df['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'].isna()]

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        if '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è' in df.columns:
            df['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'] = pd.to_datetime(df['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'], errors='coerce')

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Ç—Ä—ë–º –∫–ª—é—á–µ–≤—ã–º –ø–æ–ª—è–º
        df_unique = df.drop_duplicates(subset=['‚Ññ –û–î–ü–£', '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è', '–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'])

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ‚Ññ –û–î–ü–£ –∏ –¥–∞—Ç–µ
        df_sorted = df_unique.sort_values(by=['‚Ññ –û–î–ü–£', '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'])

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        def has_any_duplicates(group):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –≥—Ä—É–ø–ø–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
            return group['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'].duplicated(keep=False).any()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        duplicate_groups = df_sorted.groupby('‚Ññ –û–î–ü–£').filter(has_any_duplicates)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ "–¥–∞—Ç–∞" –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY
        duplicate_groups['–¥–∞—Ç–∞'] = duplicate_groups['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'].dt.strftime('%d-%m-%Y')

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ ‚Ññ –û–î–ü–£ –∏ —Å–±–æ—Ä –≤—Å–µ—Ö –¥–∞—Ç —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        grouped_dates = (
            duplicate_groups[duplicate_groups['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'].duplicated(keep=False)]
            .groupby('‚Ññ –û–î–ü–£')['–¥–∞—Ç–∞']
            .apply(list)
            .reset_index()
            .rename(columns={'–¥–∞—Ç–∞': '–¥–∞—Ç—ã'})
        )

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "dd-mm-yyyy"
        def sort_dates(date_list):
            return sorted(date_list, key=lambda x: pd.to_datetime(x, format="%d-%m-%Y"))

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∫ –∫–∞–∂–¥–æ–º—É —Å–ø–∏—Å–∫—É
        grouped_dates['–¥–∞—Ç—ã'] = grouped_dates['–¥–∞—Ç—ã'].apply(sort_dates)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞, —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã
        address_info = (
            df[['‚Ññ –û–î–ü–£', '–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞', '–®–∏—Ä–æ—Ç–∞', '–î–æ–ª–≥–æ—Ç–∞', '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞']]
            .drop_duplicates(subset=['‚Ññ –û–î–ü–£'])  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ‚Ññ –û–î–ü–£
            .set_index('‚Ññ –û–î–ü–£')  # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ ‚Ññ –û–î–ü–£
        )

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å grouped_dates –ø–æ —Å—Ç–æ–ª–±—Ü—É ‚Ññ –û–î–ü–£
        grouped_dates = grouped_dates.merge(
            address_info,
            left_on='‚Ññ –û–î–ü–£',
            right_index=True,
            how='left'
        )

        return grouped_dates, df_unique


    # Streamlit-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.title("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –û–î–ü–£")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])

    if uploaded_file is not None:
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            df = pd.read_csv(uploaded_file, encoding='cp1251')
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            st.stop()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        try:
            result_df, full_data = process_data(df)
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.stop()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        st.dataframe(result_df)

        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞
        st.subheader("üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É (result_df) –¥–ª—è –∫–∞—Ä—Ç—ã
        map_data = result_df.copy()  # –¢–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏

        # –°–ª–æ–≤–∞—Ä—å –∏–∫–æ–Ω–æ–∫
        ICON_URLS = {
            "–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –¥–æ–º": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png",
            "–î—Ä—É–≥–æ–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
            "–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∫–æ–º–±–∏–Ω–∞—Ç, —Ü–µ–Ω—Ç—Ä": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png",
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∑–¥–∞–Ω–∏—è, –∫–æ–Ω—Ç–æ—Ä—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png",
            "–î–µ—Ç. —è—Å–ª–∏ –∏ —Å–∞–¥—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-violet.png",
            "–®–∫–æ–ª—ã –∏ –í–£–ó": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png",
            "–ñ–∏–ª–æ–µ –∑–¥–∞–Ω–∏–µ (–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞, –æ–±—â–µ–∂–∏—Ç–∏–µ)": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightblue.png",
            "–ú–∞–≥–∞–∑–∏–Ω—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png",
            "–ë–æ–ª—å–Ω–∏—Ü—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png",
            "–ò–Ω—Ç–µ—Ä–Ω–∞—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightgreen.png",
            "–û–±—â–µ–∂–∏—Ç–∏–µ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightblue.png",
            "–ê–≤—Ç–æ—Å—Ç–æ—è–Ω–∫–∞": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
            "–ù–µ–∂–∏–ª–æ–π –¥–æ–º": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
            "–ì–∞—Ä–∞–∂–∏": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
            "–ö–∞–∑–∞—Ä–º—ã –∏ –ø–æ–º–µ—â–µ–Ω–∏—è –≤–æ—Ö—Ä": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-darkgreen.png",
            "–ü–æ–∂–∞—Ä–Ω–æ–µ –¥–µ–ø–æ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-darkred.png",
            "–°–ø–æ—Ä—Ç–∑–∞–ª—ã, –∫—Ä—ã—Ç—ã–µ —Å—Ç–∞–¥–∏–æ–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightgreen.png",
            "–ì—Ä—É–ø–ø–æ–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è —Å–º–µ—à–µ–Ω–∏—è": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
            "–ê–≤—Ç–æ–º–æ–π–∫–∞": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
            "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-brown.png",
            "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ": "https://raw.githubusercontent.com/ellen-firs/hackathon/refs/heads/main/media/medical_15048702.png",
            "–û–±—ä–µ–∫—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png"
        }

        if "–®–∏—Ä–æ—Ç–∞" in map_data.columns and "–î–æ–ª–≥–æ—Ç–∞" in map_data.columns:
            map_df = map_data[["–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞", "–®–∏—Ä–æ—Ç–∞", "–î–æ–ª–≥–æ—Ç–∞", "–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"]].dropna().copy()
            map_df = map_df.rename(columns={"–®–∏—Ä–æ—Ç–∞": "lat", "–î–æ–ª–≥–æ—Ç–∞": "lon"})


            def get_icon_data(obj_type):
                return {
                    "url": ICON_URLS.get(obj_type, ICON_URLS["–û–±—ä–µ–∫—Ç"]),
                    "width": 30,
                    "height": 30,
                    "anchorY": 30,
                }


            map_df["icon_data"] = map_df["–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"].apply(get_icon_data)

            icon_layer = pdk.Layer(
                type="IconLayer",
                data=map_df,
                get_icon="icon_data",
                get_position='[lon, lat]',
                get_size=4,
                size_scale=10,
                pickable=True,
                tooltip=True,
            )

            view_state = pdk.ViewState(
                latitude=map_df["lat"].mean(),
                longitude=map_df["lon"].mean(),
                zoom=11,
                pitch=0
            )

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
            st.pydeck_chart(pdk.Deck(
                layers=[icon_layer],
                initial_view_state=view_state,
                tooltip={
                    "html": "<b>–ê–¥—Ä–µ—Å:</b> {–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞}<br><b>–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:</b> {–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞}",
                    "style": {"backgroundColor": "steelblue", "color": "white"}
                }
            ))

        # –í—ã–±–æ—Ä ‚Ññ –û–î–ü–£
        unique_odpu_numbers = result_df['‚Ññ –û–î–ü–£'].unique()
        selected_odpu = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ ‚Ññ –û–î–ü–£ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", unique_odpu_numbers)

        if selected_odpu:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É ‚Ññ –û–î–ü–£
            detailed_data = full_data[full_data['‚Ññ –û–î–ü–£'] == selected_odpu][[
                '‚Ññ –û–î–ü–£', '–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞', '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞', '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è', '–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'
            ]].copy()

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ" (–∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∞–¥—Ä–µ—Å–∞)
            detailed_data['–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'] = detailed_data['–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞'].str.split().str[0]

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            detailed_data['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'] = detailed_data['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'].dt.strftime('%d.%m.%Y')

            # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
            detailed_data = detailed_data[[
                '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', '‚Ññ –û–î–ü–£', '–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞', '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞', '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è',
                '–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'
            ]]

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            st.subheader(f"–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è ‚Ññ –û–î–ü–£: {selected_odpu}")


            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
            def highlight_duplicates(dataframe):
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame –¥–ª—è —Å—Ç–∏–ª–µ–π
                styles = pd.DataFrame('', index=dataframe.index, columns=dataframe.columns)
                # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —Å—Ç—Ä–æ–∫ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ "–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª"
                duplicated_mask = dataframe['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'].duplicated(keep=False)
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å: –ø–∞—Å—Ç–µ–ª—å–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Å—Ç—Ä–æ–∫ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
                styles.loc[duplicated_mask, :] = 'background-color: #FFD6D6'
                return styles


            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
            st.dataframe(detailed_data.style.apply(highlight_duplicates, axis=None))

            # –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            csv_detailed = detailed_data.to_csv(index=False, encoding='cp1251')
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ CSV",
                data=csv_detailed,
                file_name=f"detailed_{selected_odpu}.csv",
                mime="text/csv"
            )


            # –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
            # –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
            def analyze_anomalies(dataframe):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
                dataframe['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'] = pd.to_datetime(dataframe['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'],
                                                                      format='%d.%m.%Y')

                # –¢–∏–ø 1: –î–∞—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (—Ä–∞–∑–Ω–∏—Ü–∞ <= 30 –¥–Ω–µ–π)
                type_1_mask = dataframe.duplicated(subset=['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'], keep=False)
                type_1_pairs = dataframe[type_1_mask].sort_values(
                    by=['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª', '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'])
                type_1_count = 0

                for _, group in type_1_pairs.groupby('–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'):
                    for i in range(1, len(group)):
                        if (group.iloc[i]['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'] - group.iloc[i - 1][
                            '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è']).days <= 31:
                            type_1_count += 1

                # –¢–∏–ø 2: –î–µ–Ω—å, –º–µ—Å—è—Ü –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –Ω–æ –≥–æ–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                dataframe['–î–∞—Ç–∞ –±–µ–∑ –≥–æ–¥–∞'] = dataframe['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'].dt.strftime(
                    '%d.%m')  # –£–±–∏—Ä–∞–µ–º –≥–æ–¥ –∏–∑ –¥–∞—Ç—ã
                type_2_mask = dataframe.duplicated(subset=['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª', '–î–∞—Ç–∞ –±–µ–∑ –≥–æ–¥–∞'], keep=False)
                type_2_count = type_2_mask.sum()

                # –¢–∏–ø 3: –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –Ω–æ –¥–∞—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–Ω—ã–µ
                type_3_mask = dataframe.duplicated(subset=['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'],
                                                   keep=False) & ~type_1_mask & ~type_2_mask
                type_3_count = type_3_mask.sum()

                return type_1_count, type_2_count, type_3_count


            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
            type_1_count, type_2_count, type_3_count = analyze_anomalies(detailed_data)

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            st.subheader("–ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π")
            st.write(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π:")
            st.write(
                f"- –¢–∏–ø 1 (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞): {type_1_count}"
                f"\n –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. "
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –æ—à–∏–±–∫–∏ –ø—Ä–∏–±–æ—Ä–æ–≤ —É—á–µ—Ç–∞, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –∏–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π."
            )
            st.write(
                f"- –¢–∏–ø 2 (—Å–æ–≤–ø–∞–¥–∞—é—Ç –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –Ω–æ –≥–æ–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è): {type_2_count // 2}"
                f"\n –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –≥–æ–¥–∞–º–∏. "
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ–¥–∞ –∏–ª–∏ –æ—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ —É—á–µ—Ç–∞."
            )
            st.write(
                f"- –¢–∏–ø 3 (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –Ω–æ –¥–∞—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–Ω—ã–µ): {type_3_count // 2}"
                f"\n –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö. "
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ), "
                f"–∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è."
            )

    else:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")

elif tab_option == "üîÖ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏ (3 –ø—Ä–∏–º–µ—Ä)":
    st.title("–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏")
    st.write("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    col1, col2 = st.columns(2)
    with col1:
        usage_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ no_usage_true.csv", type="csv")
    with col2:
        temp_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ temp.xlsx", type="xlsx")

    @st.cache_data
    def process_data(usage_file, temp_file):
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if usage_file is None or usage_file.size == 0:
                st.error("–§–∞–π–ª no_usage_true.csv –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
                return pd.DataFrame()

            usage_df = pd.read_csv(usage_file, encoding='cp1251')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
            if usage_df.empty:
                st.error("–§–∞–π–ª no_usage_true.csv –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.")
                return pd.DataFrame()

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            usage_df['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'] = (
                pd.to_datetime(usage_df['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'], errors='coerce') - pd.DateOffset(months=1)
            ).dt.strftime('%m-%Y')

            usage_df = usage_df.rename(columns={'–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è': '–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è'})

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if temp_file is None or temp_file.size == 0:
                st.error("–§–∞–π–ª temp.xlsx –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
                return pd.DataFrame()

            temp_df = pd.read_excel(temp_file)
            temp_df = temp_df.rename(columns={'–ú–µ—Å—è—Ü': '–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è'})

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            merged_df = usage_df.merge(temp_df, on='–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è', how='left')
            return merged_df[merged_df['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].notna()]

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()

    def load_data():
        if usage_file is None or temp_file is None:
            return pd.DataFrame()

        merged_df = process_data(usage_file, temp_file)

        if merged_df.empty:
            return pd.DataFrame()

        analysis_df = merged_df[
            ["‚Ññ –û–î–ü–£", "–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è", "–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"]
        ].dropna()

        analysis_df["–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è"] = pd.to_datetime(
            analysis_df["–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è"], format="%m-%Y", errors="coerce"
        )

        return analysis_df.dropna(subset=["–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è"])

    analysis_df = load_data()

    if analysis_df.empty:
        st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
    else:
        analysis_df = analysis_df.sort_values(by=["‚Ññ –û–î–ü–£", "–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è"])
        unique_odpu = sorted(analysis_df["‚Ññ –û–î–ü–£"].unique())

        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        selected_odpu = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ ‚Ññ –û–î–ü–£:", options=unique_odpu)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        filtered_df = analysis_df[analysis_df["‚Ññ –û–î–ü–£"] == selected_odpu]

        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        monthly_data = filtered_df.resample('M', on='–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è').agg({
            "–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª": "mean",
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "mean"
        }).reset_index()

        monthly_data["–ì–æ–¥-–ú–µ—Å—è—Ü"] = monthly_data["–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è"].dt.strftime("%Y-%m")

        # –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞")
        col_date, col_checks = st.columns([2, 3])

        with col_date:
            date_range = st.date_input(
                "–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
                [monthly_data["–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è"].min().date(), monthly_data["–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è"].max().date()],
                min_value=monthly_data["–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è"].min().date(),
                max_value=monthly_data["–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è"].max().date()
            )

        with col_checks:
            show_consumption = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", value=True)
            show_temperature = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É", value=True)
            show_annotations = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏", value=True)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
        filtered_monthly = monthly_data[
            (monthly_data["–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è"].dt.date >= date_range[0]) &
            (monthly_data["–î–∞—Ç–∞_–ü–æ–∫–∞–∑–∞–Ω–∏—è"].dt.date <= date_range[1])
        ]

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig = make_subplots(specs=[[{"secondary_y": True}]])

        if show_consumption:
            fig.add_trace(
                go.Bar(
                    x=filtered_monthly["–ì–æ–¥-–ú–µ—Å—è—Ü"],
                    y=filtered_monthly["–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª"],
                    name="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–ì–∫–∞–ª)",
                    marker_color="green",
                    opacity=0.7,
                    text=filtered_monthly["–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª"].round(1),
                    textposition='outside' if show_annotations else None
                ),
                secondary_y=False
            )

        if show_temperature:
            fig.add_trace(
                go.Scatter(
                    x=filtered_monthly["–ì–æ–¥-–ú–µ—Å—è—Ü"],
                    y=filtered_monthly["–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"],
                    name="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
                    mode="lines+markers+text" if show_annotations else "lines+markers",
                    line=dict(color="purple", width=2),
                    marker=dict(size=8),
                    text=filtered_monthly["–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"].round(1).astype(str) + "¬∞C",
                    textposition="top center" if show_annotations else None
                ),
                secondary_y=True
            )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        fig.update_xaxes(title_text="–ú–µ—Å—è—Ü", tickangle=45)
        fig.update_yaxes(title_text="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–ì–∫–∞–ª)", secondary_y=False,
                         range=[0, filtered_monthly["–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª"].max() * 1.2])
        fig.update_yaxes(title_text="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", secondary_y=True,
                         autorange="reversed")

        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        fig.update_layout(
            title=f"–ê–Ω–∞–ª–∏–∑ –û–î–ü–£ ‚Ññ{selected_odpu}",
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
            hovermode="x unified",
            margin=dict(l=20, r=20, t=40, b=20),
            height=600
        )

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        st.plotly_chart(fig, use_container_width=True)

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        st.subheader(f"–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –û–î–ü–£ ‚Ññ{selected_odpu}")
        detailed_columns = [
            "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
            "‚Ññ –û–î–ü–£",
            "–í–∏–¥ —ç–Ω–µ—Ä–≥-–∞ –ì–í–°",
            "–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞",
            "–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞",
            "–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è",
            "–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª"
        ]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è detailed_df –∫–∞–∫ –ø—É—Å—Ç–æ–π DataFrame
        detailed_df = pd.DataFrame()

        try:
            detailed_df = pd.read_csv(usage_file, encoding='cp1251')
            detailed_df = detailed_df[detailed_df["‚Ññ –û–î–ü–£"] == selected_odpu][detailed_columns]
            st.dataframe(detailed_df)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not detailed_df.empty:
            detailed_csv = detailed_df.to_csv(index=False).encode("utf-8")
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
                data=detailed_csv,
                file_name=f"odpu_{selected_odpu}_detailed_data.csv",
                mime="text/csv"
            )

# –í–∫–ª–∞–¥–∫–∞ 2: 4 –ø—Ä–∏–º–µ—Ä.py
elif tab_option == "üìà –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (4 –ø—Ä–∏–º–µ—Ä)":
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=["csv"])

    @st.cache_data
    def load_data_1(uploaded_file):
        if uploaded_file is None:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
            return pd.DataFrame()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω

        try:
            # –ß—Ç–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            df = pd.read_csv(uploaded_file, encoding="cp1251")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ì–í–° –ò–¢–ü
            df['–ì–í–° –ò–¢–ü –¥–∞/–Ω–µ—Ç'] = df['–í–∏–¥ —ç–Ω–µ—Ä–≥-–∞ –ì–í–°'].apply(
                lambda x: '–¥–∞' if isinstance(x, str) and '–ì–í–°-–ò–¢–ü' in x else '–Ω–µ—Ç'
            )

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            numeric_cols = ['–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞', '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞', '–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª', '–®–∏—Ä–æ—Ç–∞',
                            '–î–æ–ª–≥–æ—Ç–∞']
            for col in numeric_cols:
                df[col] = pd.to_numeric(
                    df[col].astype(str).str.replace(',', '.'),
                    errors='coerce'
                )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            if '–î–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏' in df.columns:
                df['–î–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏'] = pd.to_datetime(
                    df['–î–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏'],
                    errors='coerce'
                ).dt.year

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ì–æ–¥–∞ –∏ –ú–µ—Å—è—Ü–∞
            df['–ì–æ–¥'] = pd.to_numeric(df['–ì–æ–¥'], errors='coerce').astype('Int64')
            df['–ú–µ—Å—è—Ü'] = pd.to_numeric(df['–ú–µ—Å—è—Ü'], errors='coerce').astype('Int64')

            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
            df = df.dropna(subset=[
                '–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞',
                '–î–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏',
                '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞',
                '–ì–æ–¥',
                '–ú–µ—Å—è—Ü',
                '–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'
            ])

            return df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            return pd.DataFrame()


    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data_1(uploaded_file)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if df.empty:
        st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª.")
        st.stop()

    # –§–∏–ª—å—Ç—Ä—ã
    st.subheader("–§–∏–ª—å—Ç—Ä—ã")
    floor_range = st.slider(
        '–≠—Ç–∞–∂–Ω–æ—Å—Ç—å',
        min_value=int(df['–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞'].min()),
        max_value=int(df['–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞'].max()),
        value=(int(df['–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞'].min()), int(df['–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞'].max()))
    )
    area_min = int(df['–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞'].min())
    area_max = int(df['–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞'].max())
    area_range = st.slider(
        '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å',
        min_value=area_min,
        max_value=area_max,
        value=(area_min, area_max)
    )
    year_range = st.slider(
        '–ü–µ—Ä–∏–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏',
        min_value=int(df['–î–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏'].min()),
        max_value=int(df['–î–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏'].max()),
        value=(int(df['–î–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏'].min()), int(df['–î–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏'].max()))
    )
    consumption_year = st.selectbox(
        '–ì–æ–¥',
        options=[None] + sorted(df['–ì–æ–¥'].unique().tolist())
    )
    consumption_month = st.selectbox(
        '–ú–µ—Å—è—Ü',
        options=[None] + sorted(df['–ú–µ—Å—è—Ü'].unique().tolist())
    )
    gvs_filter = st.selectbox('–ì–í–° –ò–¢–ü', ['–í—Å–µ', '–¥–∞', '–Ω–µ—Ç'])

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    query = (
            df['–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞'].between(*floor_range) &
            df['–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞'].between(*area_range) &
            df['–î–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏'].between(*year_range)
    )
    if consumption_year:
        query &= df['–ì–æ–¥'] == consumption_year
    if consumption_month:
        query &= df['–ú–µ—Å—è—Ü'] == consumption_month
    if gvs_filter != '–í—Å–µ':
        query &= df['–ì–í–° –ò–¢–ü –¥–∞/–Ω–µ—Ç'] == gvs_filter

    filtered_df = df[query]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    result_df = filtered_df[[
        '–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞',
        '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞',
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–¥–∞–Ω–∏—è',
        '–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞',
        '–î–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏',
        '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞',
        '–ì–í–° –ò–¢–ü –¥–∞/–Ω–µ—Ç',
        '–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª',
        '–ì–æ–¥',
        '–ú–µ—Å—è—Ü',
        '–®–∏—Ä–æ—Ç–∞',
        '–î–æ–ª–≥–æ—Ç–∞'
    ]].rename(columns={
        '–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª': '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'
    })

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if not result_df.empty:
        average_consumption = result_df['–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'].mean()
        if average_consumption != 0:
            result_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ %'] = (
                    (result_df['–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'] - average_consumption) / average_consumption * 100
            ).round(2)
        else:
            result_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ %'] = 0.0
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        average_row = pd.DataFrame([[
            '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
            None,
            None,
            None,
            None,
            None,
            None,
            round(average_consumption, 2),
            None,
            None,
            None,
            None,
            0.0
        ]], columns=result_df.columns)
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        result_df = pd.concat([result_df, average_row], ignore_index=True)
        result_df = result_df.fillna('')
    else:
        result_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ %'] = ''


    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    def apply_styles(row):
        if row['–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞'] == '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ':
            return ['' for _ in row.index]
        try:
            deviation = float(row['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ %'])
        except (ValueError, TypeError):
            return ['' for _ in row.index]
        if deviation < -25:
            return ['background-color: #FFCCCC' for _ in row.index]
        elif deviation > 25:
            return ['background-color: #CCFFCC' for _ in row.index]
        else:
            return ['' for _ in row.index]


    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
    styled_df = result_df.style.apply(apply_styles, axis=1)

    # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    st.header('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏')
    if result_df.empty:
        st.warning('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è—á–µ–µ–∫
        max_cells = pd.get_option("styler.render.max_elements")
        if result_df.size > max_cells:
            st.info("–î–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ö–æ–∂–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏—è")
        else:
            try:
                st.dataframe(styled_df)
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    # –ë–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π
    if not result_df.empty and '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ %' in result_df.columns:
        st.header('–ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π')
        # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        filtered_anomalies = result_df[result_df['–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞'] != '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ']
        # –í—ã–¥–µ–ª—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
        high_anomalies = filtered_anomalies[
            filtered_anomalies['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ %'] > 25
            ]
        low_anomalies = filtered_anomalies[
            filtered_anomalies['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ %'] < -25
            ]


        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–æ–º–∞–ª–∏—è–º
        def format_anomaly_report(df, anomaly_type):
            if df.empty:
                return f"–ê–Ω–æ–º–∞–ª–∏–π {anomaly_type} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
            grouped = df.groupby(
                ['–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–¥–∞–Ω–∏—è']
            ).size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            report = []
            for _, row in grouped.iterrows():
                report.append(
                    f"- {row['–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞']} - {row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–¥–∞–Ω–∏—è']} - {row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} —à—Ç."
                )
            return "\n".join(report) if report else f"–ê–Ω–æ–º–∞–ª–∏–π {anomaly_type} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"


        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.subheader("–ê–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (>25%):")
        st.text(format_anomaly_report(high_anomalies, "–≤—ã—Å–æ–∫–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"))
        st.subheader("–ê–Ω–æ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (<-25%):")
        st.text(format_anomaly_report(low_anomalies, "–Ω–∏–∑–∫–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"))
        st.subheader("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:")
        st.text(
            "–í—ã—Å–æ–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ (—É—Ç–µ—á–∫–∏, –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è), –Ω–∏–∑–∫–∏–µ ‚Äî –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö. \n"
            "–í—ã—è–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —ç–Ω–µ—Ä–≥–æ–Ω–æ—Å–∏—Ç–µ–ª–∏ –∏ —Å–Ω–∏–∑–∏—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –Ω–∞–≥—Ä—É–∑–∫—É.\n"
            "–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∑–¥–∞–Ω–∏–π –ø–æ–º–æ–≥–∞—é—Ç –≤—ã—è–≤–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–ª–∏ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n"
            "–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ª—É–∂–∞—Ç –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –∞—É–¥–∏—Ç–∞, –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º –ì–í–° –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞.")
    else:
        st.info("–ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")

    # –ë–ª–æ–∫ –∫–∞—Ä—Ç—ã –∞–Ω–æ–º–∞–ª–∏–π
    st.header('üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∞–Ω–æ–º–∞–ª–∏–π')

    # –°–ª–æ–≤–∞—Ä—å –∏–∫–æ–Ω–æ–∫
    ICON_URLS = {
        "–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –î–æ–º": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png",
        "–î—Ä—É–≥–æ–µ –°—Ç—Ä–æ–µ–Ω–∏–µ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
        "–£—á–µ–±–Ω–æ–µ –ó–∞–≤–µ–¥–µ–Ω–∏–µ, –ö–æ–º–±–∏–Ω–∞—Ç, –¶–µ–Ω—Ç—Ä": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png",
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ó–¥–∞–Ω–∏—è, –ö–æ–Ω—Ç–æ—Ä—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png",
        "–î–µ—Ç.–Ø—Å–ª–∏ –ò –°–∞–¥—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-violet.png",
        "–®–∫–æ–ª—ã –ò –í—É–∑": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png",
        "–ñ–∏–ª–æ–µ –ó–¥–∞–Ω–∏–µ (–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞, –û–±—â–µ–∂–∏—Ç–∏–µ)": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightblue.png",
        "–ú–∞–≥–∞–∑–∏–Ω—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png",
        "–ë–æ–ª—å–Ω–∏—Ü—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png",
        "–ò–Ω—Ç–µ—Ä–Ω–∞—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightgreen.png",
        "–û–±—â–µ–∂–∏—Ç–∏–µ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightblue.png",
        "–ê–≤—Ç–æ—Å—Ç–æ—è–Ω–∫–∞": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
        "–ù–µ–∂–∏–ª–æ–π –î–æ–º": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
        "–ì–∞—Ä–∞–∂–∏": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
        "–ö–∞–∑–∞—Ä–º—ã –ò –ü–æ–º–µ—â–µ–Ω–∏—è –í–æ—Ö—Ä": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-darkgreen.png",
        "–ü–æ–∂–∞—Ä–Ω–æ–µ –î–µ–ø–æ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-darkred.png",
        "–°–ø–æ—Ä—Ç–∑–∞–ª—ã, –ö—Ä—ã—Ç—ã–µ –°—Ç–∞–¥–∏–æ–Ω—ã –ò –î—Ä—É–≥–∏–µ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –°–æ–æ—Ä—É–∂–µ–Ω–∏—è": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightgreen.png",
        "–ì—Ä—É–ø–ø–æ–≤–∞—è –°—Ç–∞–Ω—Ü–∏—è –°–º–µ—à–µ–Ω–∏—è": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
        "–ê–≤—Ç–æ–º–æ–π–∫–∞": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
        "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –û–±—ä–µ–∫—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-brown.png",
        "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –£—á—Ä–µ–∂–¥–µ–Ω–∏–µ": "https://raw.githubusercontent.com/ellen-firs/hackathon/refs/heads/main/media/medical_15048702.png",
        "–û–±—ä–µ–∫—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png"
    }

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç—ã
    if not result_df.empty and '–®–∏—Ä–æ—Ç–∞' in result_df.columns and '–î–æ–ª–≥–æ—Ç–∞' in result_df.columns:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if result_df[['–®–∏—Ä–æ—Ç–∞', '–î–æ–ª–≥–æ—Ç–∞']].isnull().all().all():
            st.error("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        else:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            map_df = result_df[[
                '–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞',
                '–®–∏—Ä–æ—Ç–∞',
                '–î–æ–ª–≥–æ—Ç–∞',
                '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞',
                '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª',
                '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ %'
            ]].dropna(subset=['–®–∏—Ä–æ—Ç–∞', '–î–æ–ª–≥–æ—Ç–∞']).copy()
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
            map_df['–®–∏—Ä–æ—Ç–∞'] = pd.to_numeric(map_df['–®–∏—Ä–æ—Ç–∞'], errors='coerce')
            map_df['–î–æ–ª–≥–æ—Ç–∞'] = pd.to_numeric(map_df['–î–æ–ª–≥–æ—Ç–∞'], errors='coerce')
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            map_df = map_df.dropna(subset=['–®–∏—Ä–æ—Ç–∞', '–î–æ–ª–≥–æ—Ç–∞'])
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if map_df.empty:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ")
            else:
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
                center_lat = map_df['–®–∏—Ä–æ—Ç–∞'].mean()
                center_lon = map_df['–î–æ–ª–≥–æ—Ç–∞'].mean()

                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
                high_anomalies_map = map_df[map_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ %'] > 25]
                low_anomalies_map = map_df[map_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ %'] < -25]


                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
                def get_icon(obj_type, anomaly_type):
                    default_icons = {
                        'high': "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png",
                        'low': "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png"
                    }
                    return {
                        "url": ICON_URLS.get(obj_type, default_icons[anomaly_type]),
                        "width": 30,
                        "height": 30,
                        "anchorY": 30
                    }


                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–æ–µ–≤
                layers = []
                if not high_anomalies_map.empty:
                    high_anomalies_map.loc[:, 'icon_data'] = high_anomalies_map['–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞'].apply(
                        lambda x: get_icon(x, 'high')
                    )
                    high_layer = pdk.Layer(
                        "IconLayer",
                        high_anomalies_map,
                        get_icon="icon_data",
                        get_position="[–î–æ–ª–≥–æ—Ç–∞, –®–∏—Ä–æ—Ç–∞]",
                        get_size=4,
                        size_scale=10,
                        pickable=True
                    )
                    layers.append(high_layer)

                if not low_anomalies_map.empty:
                    low_anomalies_map.loc[:, 'icon_data'] = low_anomalies_map['–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞'].apply(
                        lambda x: get_icon(x, 'low')
                    )
                    low_layer = pdk.Layer(
                        "IconLayer",
                        low_anomalies_map,
                        get_icon="icon_data",
                        get_position="[–î–æ–ª–≥–æ—Ç–∞, –®–∏—Ä–æ—Ç–∞]",
                        get_size=4,
                        size_scale=10,
                        pickable=True
                    )
                    layers.append(low_layer)

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∞ –∫–∞—Ä—Ç—ã
                view_state = pdk.ViewState(
                    latitude=center_lat,
                    longitude=center_lon,
                    zoom=12,
                    pitch=0
                )

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
                tooltip = {
                    "html": "<b>{–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞}</b><br/>"
                            "–¢–∏–ø: {–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞}<br/>"
                            "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª} –ì–∫–∞–ª<br/>"
                            "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ %}%",
                    "style": {"backgroundColor": "white", "color": "black"}
                }

                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã
                st.pydeck_chart(pdk.Deck(
                    layers=layers,
                    initial_view_state=view_state,
                    tooltip=tooltip,
                    map_style=pdk.map_styles.CARTO_LIGHT
                ))
    else:
        st.info("–î–∞–Ω–Ω—ã–µ –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –≤—ã–±–æ—Ä–∫–µ")
