import streamlit as st
import pandas as pd
import pydeck as pdk


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def process_data(df):
    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è
    df = df[~df['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'].isna()]

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    if '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è' in df.columns:
        df['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'] = pd.to_datetime(df['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'], errors='coerce')

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Ç—Ä—ë–º –∫–ª—é—á–µ–≤—ã–º –ø–æ–ª—è–º
    df_unique = df.drop_duplicates(subset=['‚Ññ –û–î–ü–£', '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è', '–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'])

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ‚Ññ –û–î–ü–£ –∏ –¥–∞—Ç–µ
    df_sorted = df_unique.sort_values(by=['‚Ññ –û–î–ü–£', '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'])

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
    def has_any_duplicates(group):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –≥—Ä—É–ø–ø–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        return group['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'].duplicated(keep=False).any()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
    duplicate_groups = df_sorted.groupby('‚Ññ –û–î–ü–£').filter(has_any_duplicates)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ "–¥–∞—Ç–∞" –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY
    duplicate_groups['–¥–∞—Ç–∞'] = duplicate_groups['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'].dt.strftime('%d-%m-%Y')

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ ‚Ññ –û–î–ü–£ –∏ —Å–±–æ—Ä –≤—Å–µ—Ö –¥–∞—Ç —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
    grouped_dates = (
        duplicate_groups[duplicate_groups['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'].duplicated(keep=False)]
        .groupby('‚Ññ –û–î–ü–£')['–¥–∞—Ç–∞']
        .apply(list)
        .reset_index()
        .rename(columns={'–¥–∞—Ç–∞': '–¥–∞—Ç—ã'})
    )

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "dd-mm-yyyy"
    def sort_dates(date_list):
        return sorted(date_list, key=lambda x: pd.to_datetime(x, format="%d-%m-%Y"))

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∫ –∫–∞–∂–¥–æ–º—É —Å–ø–∏—Å–∫—É
    grouped_dates['–¥–∞—Ç—ã'] = grouped_dates['–¥–∞—Ç—ã'].apply(sort_dates)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞, —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã
    address_info = (
        df[['‚Ññ –û–î–ü–£', '–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞', '–®–∏—Ä–æ—Ç–∞', '–î–æ–ª–≥–æ—Ç–∞', '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞']]
        .drop_duplicates(subset=['‚Ññ –û–î–ü–£'])  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ‚Ññ –û–î–ü–£
        .set_index('‚Ññ –û–î–ü–£')  # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ ‚Ññ –û–î–ü–£
    )

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å grouped_dates –ø–æ —Å—Ç–æ–ª–±—Ü—É ‚Ññ –û–î–ü–£
    grouped_dates = grouped_dates.merge(
        address_info,
        left_on='‚Ññ –û–î–ü–£',
        right_index=True,
        how='left'
    )

    return grouped_dates, df_unique


# Streamlit-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –û–î–ü–£")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])

if uploaded_file is not None:
    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        df = pd.read_csv(uploaded_file, encoding='cp1251')
        st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        st.stop()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        result_df, full_data = process_data(df)
        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        st.stop()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    st.dataframe(result_df)

    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞
    st.subheader("üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É (result_df) –¥–ª—è –∫–∞—Ä—Ç—ã
    map_data = result_df.copy()  # –¢–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏

    # –°–ª–æ–≤–∞—Ä—å –∏–∫–æ–Ω–æ–∫
    ICON_URLS = {
        "–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –¥–æ–º": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png",
        "–î—Ä—É–≥–æ–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
        "–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∫–æ–º–±–∏–Ω–∞—Ç, —Ü–µ–Ω—Ç—Ä": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png",
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∑–¥–∞–Ω–∏—è, –∫–æ–Ω—Ç–æ—Ä—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png",
        "–î–µ—Ç. —è—Å–ª–∏ –∏ —Å–∞–¥—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-violet.png",
        "–®–∫–æ–ª—ã –∏ –í–£–ó": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png",
        "–ñ–∏–ª–æ–µ –∑–¥–∞–Ω–∏–µ (–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞, –æ–±—â–µ–∂–∏—Ç–∏–µ)": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightblue.png",
        "–ú–∞–≥–∞–∑–∏–Ω—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png",
        "–ë–æ–ª—å–Ω–∏—Ü—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png",
        "–ò–Ω—Ç–µ—Ä–Ω–∞—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightgreen.png",
        "–û–±—â–µ–∂–∏—Ç–∏–µ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightblue.png",
        "–ê–≤—Ç–æ—Å—Ç–æ—è–Ω–∫–∞": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
        "–ù–µ–∂–∏–ª–æ–π –¥–æ–º": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
        "–ì–∞—Ä–∞–∂–∏": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
        "–ö–∞–∑–∞—Ä–º—ã –∏ –ø–æ–º–µ—â–µ–Ω–∏—è –≤–æ—Ö—Ä": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-darkgreen.png",
        "–ü–æ–∂–∞—Ä–Ω–æ–µ –¥–µ–ø–æ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-darkred.png",
        "–°–ø–æ—Ä—Ç–∑–∞–ª—ã, –∫—Ä—ã—Ç—ã–µ —Å—Ç–∞–¥–∏–æ–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightgreen.png",
        "–ì—Ä—É–ø–ø–æ–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è —Å–º–µ—à–µ–Ω–∏—è": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
        "–ê–≤—Ç–æ–º–æ–π–∫–∞": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
        "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-brown.png",
        "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ": "https://raw.githubusercontent.com/ellen-firs/hackathon/refs/heads/main/media/medical_15048702.png",
        "–û–±—ä–µ–∫—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png"
    }

    if "–®–∏—Ä–æ—Ç–∞" in map_data.columns and "–î–æ–ª–≥–æ—Ç–∞" in map_data.columns:
        map_df = map_data[["–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞", "–®–∏—Ä–æ—Ç–∞", "–î–æ–ª–≥–æ—Ç–∞", "–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"]].dropna().copy()
        map_df = map_df.rename(columns={"–®–∏—Ä–æ—Ç–∞": "lat", "–î–æ–ª–≥–æ—Ç–∞": "lon"})

        def get_icon_data(obj_type):
            return {
                "url": ICON_URLS.get(obj_type, ICON_URLS["–û–±—ä–µ–∫—Ç"]),
                "width": 30,
                "height": 30,
                "anchorY": 30,
            }

        map_df["icon_data"] = map_df["–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"].apply(get_icon_data)

        icon_layer = pdk.Layer(
            type="IconLayer",
            data=map_df,
            get_icon="icon_data",
            get_position='[lon, lat]',
            get_size=4,
            size_scale=10,
            pickable=True,
            tooltip=True,
        )

        view_state = pdk.ViewState(
            latitude=map_df["lat"].mean(),
            longitude=map_df["lon"].mean(),
            zoom=11,
            pitch=0
        )

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        st.pydeck_chart(pdk.Deck(
            layers=[icon_layer],
            initial_view_state=view_state,
            tooltip={
                "html": "<b>–ê–¥—Ä–µ—Å:</b> {–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞}<br><b>–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:</b> {–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞}",
                "style": {"backgroundColor": "steelblue", "color": "white"}
            }
        ))

    # –í—ã–±–æ—Ä ‚Ññ –û–î–ü–£
    unique_odpu_numbers = result_df['‚Ññ –û–î–ü–£'].unique()
    selected_odpu = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ ‚Ññ –û–î–ü–£ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", unique_odpu_numbers)

    if selected_odpu:
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É ‚Ññ –û–î–ü–£
        detailed_data = full_data[full_data['‚Ññ –û–î–ü–£'] == selected_odpu][[
            '‚Ññ –û–î–ü–£', '–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞', '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞', '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è', '–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'
        ]].copy()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ" (–∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∞–¥—Ä–µ—Å–∞)
        detailed_data['–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'] = detailed_data['–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞'].str.split().str[0]

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        detailed_data['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'] = detailed_data['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'].dt.strftime('%d.%m.%Y')

        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        detailed_data = detailed_data[[
            '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', '‚Ññ –û–î–ü–£', '–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞', '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞', '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è',
            '–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'
        ]]

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        st.subheader(f"–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è ‚Ññ –û–î–ü–£: {selected_odpu}")


        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        def highlight_duplicates(dataframe):
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame –¥–ª—è —Å—Ç–∏–ª–µ–π
            styles = pd.DataFrame('', index=dataframe.index, columns=dataframe.columns)
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —Å—Ç—Ä–æ–∫ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ "–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª"
            duplicated_mask = dataframe['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'].duplicated(keep=False)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å: –ø–∞—Å—Ç–µ–ª—å–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Å—Ç—Ä–æ–∫ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
            styles.loc[duplicated_mask, :] = 'background-color: #FFD6D6'
            return styles


        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        st.dataframe(detailed_data.style.apply(highlight_duplicates, axis=None))

        # –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        csv_detailed = detailed_data.to_csv(index=False, encoding='cp1251')
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ CSV",
            data=csv_detailed,
            file_name=f"detailed_{selected_odpu}.csv",
            mime="text/csv"
        )


        # –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
        # –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
        def analyze_anomalies(dataframe):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            dataframe['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'] = pd.to_datetime(dataframe['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'],
                                                                  format='%d.%m.%Y')

            # –¢–∏–ø 1: –î–∞—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (—Ä–∞–∑–Ω–∏—Ü–∞ <= 30 –¥–Ω–µ–π)
            type_1_mask = dataframe.duplicated(subset=['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'], keep=False)
            type_1_pairs = dataframe[type_1_mask].sort_values(
                by=['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª', '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'])
            type_1_count = 0

            for _, group in type_1_pairs.groupby('–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'):
                for i in range(1, len(group)):
                    if (group.iloc[i]['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'] - group.iloc[i - 1][
                        '–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è']).days <= 31:
                        type_1_count += 1

            # –¢–∏–ø 2: –î–µ–Ω—å, –º–µ—Å—è—Ü –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –Ω–æ –≥–æ–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
            dataframe['–î–∞—Ç–∞ –±–µ–∑ –≥–æ–¥–∞'] = dataframe['–î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è'].dt.strftime(
                '%d.%m')  # –£–±–∏—Ä–∞–µ–º –≥–æ–¥ –∏–∑ –¥–∞—Ç—ã
            type_2_mask = dataframe.duplicated(subset=['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª', '–î–∞—Ç–∞ –±–µ–∑ –≥–æ–¥–∞'], keep=False)
            type_2_count = type_2_mask.sum()

            # –¢–∏–ø 3: –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –Ω–æ –¥–∞—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–Ω—ã–µ
            type_3_mask = dataframe.duplicated(subset=['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'],
                                               keep=False) & ~type_1_mask & ~type_2_mask
            type_3_count = type_3_mask.sum()

            return type_1_count, type_2_count, type_3_count

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
        type_1_count, type_2_count, type_3_count = analyze_anomalies(detailed_data)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        st.subheader("–ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π")
        st.write(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π:")
        st.write(
            f"- –¢–∏–ø 1 (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞): {type_1_count}"
            f"\n –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. "
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –æ—à–∏–±–∫–∏ –ø—Ä–∏–±–æ—Ä–æ–≤ —É—á–µ—Ç–∞, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –∏–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π."
        )
        st.write(
            f"- –¢–∏–ø 2 (—Å–æ–≤–ø–∞–¥–∞—é—Ç –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –Ω–æ –≥–æ–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è): {type_2_count // 2}"
            f"\n –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –≥–æ–¥–∞–º–∏. "
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ–¥–∞ –∏–ª–∏ –æ—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ —É—á–µ—Ç–∞."
        )
        st.write(
            f"- –¢–∏–ø 3 (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –Ω–æ –¥–∞—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–Ω—ã–µ): {type_3_count // 2}"
            f"\n –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö. "
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ), "
            f"–∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è."
        )

else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")