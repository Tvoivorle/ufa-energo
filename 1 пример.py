# app.py
import streamlit as st
import pandas as pd
import pydeck as pdk

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
st.write("""
### –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ TXT
–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏.
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª TXT", type=["txt"])

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
if uploaded_file is not None:
    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        dataframe1 = pd.read_csv(uploaded_file, encoding='utf-8', sep=',')  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - –∑–∞–ø—è—Ç–∞—è
        st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        st.subheader("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        st.dataframe(dataframe1)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –∑–∞–ø—è—Ç—ã–º–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ "‚Ññ –û–î–ü–£"
        if '‚Ññ –û–î–ü–£' in dataframe1.columns:
            count_with_comma = dataframe1['‚Ññ –û–î–ü–£'].astype(str).str.contains(',').sum()
            dataframe1 = dataframe1[~dataframe1['‚Ññ –û–î–ü–£'].astype(str).str.contains(',')]
            st.write(f"–£–¥–∞–ª–µ–Ω–æ {count_with_comma} —Å—Ç—Ä–æ–∫ —Å –∑–∞–ø—è—Ç—ã–º–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ '‚Ññ –û–î–ü–£'.")
        else:
            st.error("–°—Ç–æ–ª–±–µ—Ü '‚Ññ –û–î–ü–£' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ç–∏–ø–∞–º–∏ —Å—Ç—Ä–æ–µ–Ω–∏–π
        try:
            dataframe2 = pd.read_excel('sourse/–¢–∏–ø_—Å—Ç—Ä–æ–µ–Ω–∏—è.xlsx')
            dataframe2 = dataframe2.drop_duplicates(subset='–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞')

            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—è "–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞" –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É
            dataframe1['–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞'] = dataframe1['–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞'].str.strip().str.lower()
            dataframe2['–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞'] = dataframe2['–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞'].str.strip().str.lower()

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ "–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞"
            merged_df = pd.merge(dataframe1, dataframe2, on='–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞', how='left')

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ç–µ–≥–æ–≤
            merged_df['–ê–Ω–æ–º–∞–ª–∏—è_–Ω—É–ª–µ–≤–æ–µ_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ_–≤_–û–ü'] = False
            merged_df['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'] = merged_df['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'].fillna(0)

            # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–∏ –Ω—É–ª–µ–≤–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤ –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            merged_df['–ê–Ω–æ–º–∞–ª–∏—è_–Ω—É–ª–µ–≤–æ–µ_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ_–≤_–û–ü'] = (
                (merged_df['–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª'] == 0) &
                (merged_df['–ú–µ—Å—è—Ü'].isin([10, 11, 12, 1, 2, 3, 4]))
            )

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            st.subheader("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            st.dataframe(merged_df)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–Ω–æ–º–∞–ª–∏—è–º
            anomaly_counts = merged_df['–ê–Ω–æ–º–∞–ª–∏—è_–Ω—É–ª–µ–≤–æ–µ_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ_–≤_–û–ü'].value_counts()
            st.write("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–Ω–æ–º–∞–ª–∏—è–º:")
            st.write(anomaly_counts)

            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞
            st.subheader("üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤")

            # –§–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            show_anomalies_only = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏")
            if show_anomalies_only:
                filtered_df = merged_df[merged_df['–ê–Ω–æ–º–∞–ª–∏—è_–Ω—É–ª–µ–≤–æ–µ_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ_–≤_–û–ü']]
            else:
                filtered_df = merged_df

            # –°–ª–æ–≤–∞—Ä—å –∏–∫–æ–Ω–æ–∫
            ICON_URLS = {
                "–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –¥–æ–º": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png",
                "–î—Ä—É–≥–æ–µ –°—Ç—Ä–æ–µ–Ω–∏–µ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
                "–£—á–µ–±–Ω–æ–µ –ó–∞–≤–µ–¥–µ–Ω–∏–µ, –ö–æ–º–±–∏–Ω–∞—Ç, –¶–µ–Ω—Ç—Ä": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png",
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ó–¥–∞–Ω–∏—è, –ö–æ–Ω—Ç–æ—Ä—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png",
                "–î–µ—Ç.–Ø—Å–ª–∏ –ò –°–∞–¥—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-violet.png",
                "–®–∫–æ–ª—ã –ò –í—É–∑": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png",
                "–ñ–∏–ª–æ–µ –ó–¥–∞–Ω–∏–µ (–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞, –û–±—â–µ–∂–∏—Ç–∏–µ)": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightblue.png",
                "–ú–∞–≥–∞–∑–∏–Ω—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png",
                "–ë–æ–ª—å–Ω–∏—Ü—ã": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png",
                "–ò–Ω—Ç–µ—Ä–Ω–∞—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightgreen.png",
                "–û–±—â–µ–∂–∏—Ç–∏–µ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightblue.png",
                "–ê–≤—Ç–æ—Å—Ç–æ—è–Ω–∫–∞": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
                "–ù–µ–∂–∏–ª–æ–π –î–æ–º": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
                "–ì–∞—Ä–∞–∂–∏": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
                "–ö–∞–∑–∞—Ä–º—ã –ò –ü–æ–º–µ—â–µ–Ω–∏—è –í–æ—Ö—Ä": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-darkgreen.png",
                "–ü–æ–∂–∞—Ä–Ω–æ–µ –î–µ–ø–æ": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-darkred.png",
                "–°–ø–æ—Ä—Ç–∑–∞–ª—ã, –ö—Ä—ã—Ç—ã–µ –°—Ç–∞–¥–∏–æ–Ω—ã –ò –î—Ä—É–≥–∏–µ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –°–æ–æ—Ä—É–∂–µ–Ω–∏—è": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-lightgreen.png",
                "–ì—Ä—É–ø–ø–æ–≤–∞—è –°—Ç–∞–Ω—Ü–∏—è –°–º–µ—à–µ–Ω–∏—è": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png",
                "–ê–≤—Ç–æ–º–æ–π–∫–∞": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png",
                "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –û–±—ä–µ–∫—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-brown.png",
                "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –£—á—Ä–µ–∂–¥–µ–Ω–∏–µ": "https://raw.githubusercontent.com/ellen-firs/hackathon/refs/heads/main/media/medical_15048702.png",
                "–û–±—ä–µ–∫—Ç": "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png"
            }

            if "–®–∏—Ä–æ—Ç–∞" in filtered_df.columns and "–î–æ–ª–≥–æ—Ç–∞" in filtered_df.columns:
                map_df = filtered_df[["–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å", "–®–∏—Ä–æ—Ç–∞", "–î–æ–ª–≥–æ—Ç–∞", "–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞",
                                      "–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª"]].dropna().copy()
                map_df = map_df.rename(columns={"–®–∏—Ä–æ—Ç–∞": "lat", "–î–æ–ª–≥–æ—Ç–∞": "lon"})

                def get_icon_data(obj_type):
                    return {
                        "url": ICON_URLS.get(obj_type, ICON_URLS["–û–±—ä–µ–∫—Ç"]),
                        "width": 30,
                        "height": 30,
                        "anchorY": 30,
                    }

                map_df["icon_data"] = map_df["–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"].apply(get_icon_data)

                icon_layer = pdk.Layer(
                    type="IconLayer",
                    data=map_df,
                    get_icon="icon_data",
                    get_position='[lon, lat]',
                    get_size=4,
                    size_scale=10,
                    pickable=True,
                    tooltip=True,
                )

                view_state = pdk.ViewState(
                    latitude=map_df["lat"].mean(),
                    longitude=map_df["lon"].mean(),
                    zoom=11,
                    pitch=0
                )

                tooltip = {
                    "html": """
                    <b>{–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å}</b><br>
                    –¢–∏–ø: {–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞}<br>
                    –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –ì–∫–∞–ª} –ì–∫–∞–ª
                    """,
                    "style": {"backgroundColor": "white", "color": "black"}
                }

                r = pdk.Deck(layers=[icon_layer], initial_view_state=view_state, tooltip=tooltip)
                st.pydeck_chart(r)
            else:
                st.warning("–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–®–∏—Ä–æ—Ç–∞ / –î–æ–ª–≥–æ—Ç–∞).")

            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            st.subheader("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            file_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .csv):",
                                      value="–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ.csv")
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                csv_data = merged_df.to_csv(index=False, encoding='cp1251')
                csv_bytes = csv_data.encode('cp1251')
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å CSV",
                    data=csv_bytes,
                    file_name=file_name,
                    mime="text/csv"
                )
                st.success(f"–§–∞–π–ª '{file_name}' –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")

        except FileNotFoundError:
            st.error("–§–∞–π–ª '–¢–∏–ø_—Å—Ç—Ä–æ–µ–Ω–∏—è.xlsx' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'sourse'.")

    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")